var searchIndex = new Map(JSON.parse('[\
["tide_disco",{"doc":"<em>Tide Disco is a web server framework with built-in </em>â€¦","t":"EEIIPPPPPFGEPGPIPPPEEEEEESSFPEPPPPFGOPCOPCHOOPNNNNNNNOPNNNNNNNNNNNNNHNNNNNNNNNNHHHNNNPNNNNNNCNNNNNNNNNNNNNNNNNNNNHNNNNOOCHNNENNNNHNNNNNNNNNNNNNHNCCNNHNNNNNNNNNNNNNCCOONNNNNNNNNNNNCNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHPFGFPFPPPPPPPPPFPONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONNNNNNNOOOONOONNNNNNNNNNNONNOOOONNONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOPFGFFKRFPKMONNNMNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNMNNNNNNNOONNNNNNOMNNNNNNNNNNNNNNNNNNNNNNNNNNNOKFNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNONNMNONNNNNNPKGPPPPPNNNNNNNNNNNNNNNMNNNNNNPGPFKPRKNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNMRKMPPPPPPPPPPPPPPPGFGGFPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOPPPPPPPPPPFPPPPPFGPGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOPPPFPPPGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPFPPPPPPPPPPPPPGPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Api","App","AppServerState","AppState","Array","Available","Boolean","Boolean","Datetime","DiscoArgs","DiscoKey","Error","Float","HealthStatus","Hexadecimal","Html","Integer","Integer","Literal","Method","RequestError","RequestParam","RequestParamType","RequestParamValue","RequestParams","SERVER_STARTUP_RETRIES","SERVER_STARTUP_SLEEP_MS","ServerState","Starting","StatusCode","Stopping","String","Table","TaggedBase64","Url","UrlSegment","ansi_color","ansi_color","api","api_toml","api_toml","app","app_api_path","app_state","app_state","app_toml","as_ref","as_ref","as_ref","as_str","augment_args","augment_args_for_update","authority","base_url","base_url","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cannot_be_a_base","check_api","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","compare","compose_config_path","compose_settings","configure_router","deserialize","deserialize","deserialize_internal","disco_toml","domain","eq","equivalent","equivalent","equivalent","equivalent","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fragment","from","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","from_directory_path","from_file_path","from_str","from_str","get_api_path","group_id","has_authority","has_host","hash","health_status","health_status","healthcheck","healthcheck","host","host_str","http","index","index","index","index","init_logging","into","into","into","into","into","into","into_client_request","into_client_request","into_resettable","into_string","is_bound","is_special","join","load_api","make_relative","method","metrics","new","options","org_data_path","origin","parse","parse_with_params","partial_cmp","password","path","path_segments","path_segments_mut","port","port_or_known_default","query","query_pairs","query_pairs_mut","request","route","router","router","scheme","serialize","serialize_internal","set_fragment","set_host","set_ip_host","set_password","set_path","set_port","set_query","set_scheme","set_username","socket","socket_addrs","status","to_file_path","to_listener","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","username","vzip","vzip","vzip","vzip","vzip","vzip","wait_for_server","AmbiguousRoutes","Api","ApiError","ApiMetadata","ApiMustBeTable","ApiVersion","CannotReadToml","HandlerAlreadyRegistered","IncorrectMethod","InvalidFormatVersion","InvalidMetaTable","MissingFormatVersion","MissingRoutesTable","Route","RoutesMustBeTable","RoutesWithPath","UndefinedRoute","api_version","as_error_source","as_error_source","at","backtrace","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone_into","clone_into","clone_into","default","delete","description","description","deserialize","deserialize","documentation","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","format_version","from","from","from","from","from","from_file","get","heading_description","heading_entry","heading_parameters","heading_routes","health","html_bottom","html_top","index","into","into","into","into","into","into_iter","into_iter","into_iter","map_err","metrics","name","new","next","parameter_none","parameter_row","parameter_table_close","parameter_table_open","post","put","route_path","routes_by_path","serialize","serialize","short_description","socket","source","spec_version","stream","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","version","vzip","vzip","vzip","vzip","vzip","with_health_check","with_public","with_version","actual","expected","reason","route1","route2","source","source","Api","App","AppError","AppHealth","AppVersion","Listener","Listener","Module","ModuleAlreadyExists","ToListener","accept","app_version","as_error_source","as_error_source","backtrace","bind","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref_mut","description","deserialize","deserialize","disco_version","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","health","info","into","into","into","into","into","module","module_health","modules","modules","register_module","serialize","serialize","serve","source","status","status","to_listener","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","version","vzip","vzip","vzip","vzip","vzip","with_state","with_version","source","Error","ServerError","as_error_source","as_error_source","backtrace","borrow","borrow_mut","catch_all","catch_all","cause","clone","clone_into","description","deserialize","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from_config_error","from_io_error","from_request_error","from_route_error","from_server_error","from_socket_error","into","into_tide_error","message","serialize","source","status","status","status","to_owned","to_string","try_from","try_into","type_id","vzip","Available","HealthCheck","HealthStatus","Initializing","ShuttingDown","TemporarilyUnavailable","Unavailabale","Unhealthy","borrow","borrow_mut","clone","clone_into","default","deserialize","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","into","serialize","status","status","to_owned","try_from","try_into","type_id","vzip","Http","Method","Metrics","ParseMethodError","ReadState","Socket","State","WriteState","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","delete","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from_str","get","into","into","is_http","is_mutable","metrics","post","put","read","socket","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write","Error","Metrics","export","Binary","Boolean","Boolean","Hexadecimal","Hexadecimal","Http","IncorrectParamType","Integer","Integer","IntegerOverflow","InvalidParam","Json","Literal","Literal","MissingParam","RequestError","RequestParam","RequestParamType","RequestParamValue","RequestParams","TagMismatch","TaggedBase64","TaggedBase64","TaggedBase64","UnsupportedContentType","accept","as_blob","as_boolean","as_error_source","as_error_source","as_integer","as_string","as_tagged_base64","backtrace","blob_param","body_auto","body_bytes","body_json","boolean_param","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","description","deserialize","deserialize","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_str","headers","integer_param","into","into","into","into","into","method","name","new","opt_blob_param","opt_boolean_param","opt_integer_param","opt_param","opt_string_param","opt_tagged_base64_param","param","param_type","param_type","parse","remote","serialize","serialize","source","string_param","tagged_base64_param","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","actual","actual","expected","expected","expected","name","param_type","reason","reason","reason","value","AppSpecific","Binary","ExportMetrics","IncorrectDocType","IncorrectMethod","IncorrectParamType","IncorrectPathType","InvalidMethod","InvalidTypeExpression","Json","MapErr","MethodMustBeString","MissingPath","MissingPathArray","PathElementError","Request","Route","RouteError","RouteMustBeTable","RouteParseError","Tide","UnrecognizedType","UnsupportedContentType","as_error_source","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone_into","description","documentation","fmt","fmt","fmt","fmt","from","from","from","from","from","has_handler","into","into","into","into","map_app_specific","map_err","method","name","new","params","patterns","source","status","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","expected","AppSpecific","Binary","Closed","Connection","IncorrectMethod","Json","Request","SocketError","UnsupportedMessageType","WebSockets","borrow","borrow","borrow_mut","borrow_mut","code","drop","fmt","fmt","from","from","from","from","from","from","into","into","into_stream","map_app_specific","poll_close","poll_flush","poll_next","poll_ready","start_send","status","to_string","try_from","try_from","try_into","try_into","try_poll_next","type_id","type_id","vzip","vzip","actual","expected","Accepted","BadGateway","BadRequest","Conflict","Continue","Created","EarlyHints","ExpectationFailed","FailedDependency","Forbidden","Found","GatewayTimeout","Gone","HttpVersionNotSupported","ImATeapot","ImUsed","InsufficientStorage","InternalServerError","LengthRequired","Locked","LoopDetected","MethodNotAllowed","MisdirectedRequest","MovedPermanently","MultiStatus","MultipleChoice","NetworkAuthenticationRequired","NoContent","NonAuthoritativeInformation","NotAcceptable","NotExtended","NotFound","NotImplemented","NotModified","Ok","OutOfRangeError","PartialContent","PayloadTooLarge","PaymentRequired","PermanentRedirect","PreconditionFailed","PreconditionRequired","ProxyAuthenticationRequired","RequestHeaderFieldsTooLarge","RequestTimeout","RequestedRangeNotSatisfiable","ResetContent","SeeOther","ServiceUnavailable","StatusCode","SwitchingProtocols","TemporaryRedirect","TooEarly","TooManyRequests","Unauthorized","UnavailableForLegalReasons","UnprocessableEntity","UnsupportedMediaType","UpgradeRequired","UriTooLong","VariantAlsoNegotiates","as_error_source","as_error_source","backtrace","borrow","borrow","borrow_mut","borrow_mut","canonical_reason","cause","clone","clone","clone_into","clone_into","description","deserialize","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_i64","from_u64","hash","into","into","is_client_error","is_informational","is_redirection","is_server_error","is_success","serialize","source","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"tide_disco"],[220,"tide_disco::api"],[348,"tide_disco::api::ApiError"],[355,"tide_disco::app"],[460,"tide_disco::app::AppError"],[461,"tide_disco::error"],[508,"tide_disco::healthcheck"],[538,"tide_disco::method"],[585,"tide_disco::metrics"],[588,"tide_disco::request"],[728,"tide_disco::request::RequestError"],[739,"tide_disco::route"],[820,"tide_disco::route::RouteError"],[821,"tide_disco::socket"],[865,"tide_disco::socket::SocketError"],[867,"tide_disco::status"],[981,"std::path"],[982,"clap_builder::builder::command"],[983,"toml::value"],[984,"core::clone"],[985,"core::cmp"],[986,"config::config"],[987,"config::error"],[988,"core::result"],[989,"routefinder::router"],[990,"alloc::sync"],[991,"serde::de"],[992,"core::option"],[993,"core::fmt"],[994,"core::fmt"],[995,"clap_builder"],[996,"std::path"],[997,"url::parser"],[998,"clap_builder::util::id"],[999,"core::hash"],[1000,"tide::request"],[1001,"tide::response"],[1002,"http_types::error"],[1003,"url::host"],[1004,"url::slicing"],[1005,"core::ops::range"],[1006,"core::ops::range"],[1007,"tungstenite::error"],[1008,"alloc::string"],[1009,"clap_builder::builder::resettable"],[1010,"url"],[1011,"url::origin"],[1012,"core::iter::traits::collect"],[1013,"core::str::iter"],[1014,"url::path_segments"],[1015,"form_urlencoded"],[1016,"url"],[1017,"core::net::ip_addr"],[1018,"core::net::socket_addr"],[1019,"alloc::vec"],[1020,"std::io::error"],[1021,"core::ops::function"],[1022,"core::any"],[1023,"core::error"],[1024,"core::marker"],[1025,"core::marker"],[1026,"serde::ser"],[1027,"std::backtrace"],[1028,"alloc::borrow"],[1029,"core::convert"],[1030,"core::fmt"],[1031,"semver"],[1032,"core::future::future"],[1033,"alloc::boxed"],[1034,"core::pin"],[1035,"tide::server"],[1036,"core::convert"],[1037,"std::io::error"],[1038,"core::ops::function"],[1039,"tagged_base64"],[1040,"core::convert"],[1041,"tungstenite::protocol::frame::coding"],[1042,"anyhow"],[1043,"serde_json::error"],[1044,"core::task::wake"],[1045,"core::task::poll"],[1046,"http_types::status_code"]],"d":["","","","","Represents a TOML array","","Represents a TOML boolean","","Represents a TOML datetime","","Configuration keys for Tide Disco settings","","Represents a TOML float","","","","Represents a TOML integer","","","","","","","","","Number of times to poll before failing","Number of milliseconds to sleep between attempts","","","","","Represents a TOML string","Represents a TOML table","","A parsed URL record.","","If true, log in color. Otherwise, no color.","","","HTTP routes","","","","","","","","","","Return the serialization of this URL.","","","Return the authority of this URL as an ASCII string.","Server address","","","","","","","","","","","","","","Return whether this URL is a cannot-be-a-base URL, meaning â€¦","Check api.toml for schema compliance errors","","","","","","","","","","","Compose the path to the applicationâ€™s configuration file","Get the application configuration","Add routes from api.toml to the routefinder instance in â€¦","","","Serialize with Serde using the internal representation of â€¦","","If this URL has a host and it is a domain name (not an IP â€¦","","","","","","","","","","","","","","Return this URLâ€™s fragment identifier, if any.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Convert a directory name as <code>std::path::Path</code> into an URL in â€¦","Convert a file name as <code>std::path::Path</code> into an URL in the â€¦","","","Get the path to <code>api.toml</code>","","Return whether the URL has an â€˜authorityâ€™, which can â€¦","Equivalent to <code>url.host().is_some()</code>.","","","","","Return a JSON expression with status 200 indicating the â€¦","Return the parsed representation of the host for this URL. â€¦","Return the string representation of the host (domain or IP â€¦","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Return the serialization of this URL.","","Return whether the URL is special (has a special scheme)","Parse a string as an URL, with this URL as the base URL.","Load the web API or panic","Creates a relative URL if possible, with this URL as the â€¦","Interfaces for methods of accessing to state.","Support for routes using the Prometheus metrics format.","","Return a default <code>ParseOptions</code> that can fully configure the â€¦","","Return the origin of this URL (â€¦","Parse an absolute URL from a string.","Parse an absolute URL from a string and add params to its â€¦","","Return the password for this URL, if any, as a â€¦","Return the path for this URL, as a percent-encoded ASCII â€¦","Unless this URL is cannot-be-a-base, return an iterator of â€¦","Return an object with methods to manipulate this URLâ€™s â€¦","Return the port number for this URL, if any.","Return the port number for this URL, or the default port â€¦","Return this URLâ€™s query string, if any, as a â€¦","Parse the URLâ€™s query string, if any, as â€¦","Manipulate this URLâ€™s query string, viewed as a sequence â€¦","","","","","Return the scheme of this URL, lower-cased, as an ASCII â€¦","","Serialize with Serde using the internal representation of â€¦","Change this URLâ€™s fragment identifier.","Change this URLâ€™s host.","Change this URLâ€™s host to the given IP address.","Change this URLâ€™s password.","Change this URLâ€™s path.","Change this URLâ€™s port number.","Change this URLâ€™s query string.","Change this URLâ€™s scheme.","Change this URLâ€™s username.","An interface for asynchronous communication with clients, â€¦","Resolve a URLâ€™s host and port number to <code>SocketAddr</code>.","","Assuming the URL is in the <code>file</code> scheme or similar, convert â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the username for this URL (typically the empty â€¦","","","","","","","Wait for the server to respond to a connection request","","A description of an API.","An error encountered when parsing or constructing an Api.","Metadata used for describing and documenting an API.","","Version information about an API.","","","","","","","","","","Iterator for routes_by_path.","","The version of this API.","","","Register a handler for a route.","","","","","","","","","","","","","","","","","","","","Register a handler for a DELETE route.","","A description of this API.","","","Compose an HTML page documenting all the routes in this â€¦","","","","","","","","","","","The version of the Tide Disco API specification format.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create an Api by reading a TOML specification from a file.","Register a handler for a GET route.","The heading preceding documentation of a route description.","The heading for documentation of a route.","The heading preceding documentation of route parameters.","The heading preceding documentation of all routes in this â€¦","Check the health status of a server with the given state.","HTML to be appended to automatically generated â€¦","HTML to be prepended to automatically generated â€¦","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new Api which is just like this one, except has a â€¦","Register a handler for a METRICS route.","The name of this API.","Parse an API from a TOML specification.","","Documentation to insert in the parameters section of a â€¦","HTML formatting an entry in a table documenting the â€¦","HTML closing a table documenting the parameters of a route.","HTML preceding the contents of a table documenting the â€¦","Register a handler for a POST route.","Register a handler for a PUT route.","HTML formatting the path of a route.","Iterate over groups of routes with the same path.","","","The short description of this API from the specification.","Register a handler for a SOCKET route.","","The format version of the TOML specification used to load â€¦","Register a uni-directional handler for a SOCKET route.","","","","","","","","","","","","","","","","","","","","Get the version of this API.","","","","","","Set the health check handler for this API.","Serve the contents of <code>dir</code> at the URL <code>/public/{{NAME}}</code>.","Set the API version.","","","","","","","","","A tide-disco server application.","An error encountered while building an App.","The health status of an application.","Version information about an application.","The Listener trait represents an implementation of http â€¦","What listener are we converting into?","","","ToListener represents any type that can be converted into a","Start accepting incoming connections. This method must be â€¦","The version of this application.","","","","Bind the listener. This starts the listening process by â€¦","","","","","","","","","","","","","","","","","","","","","","","The version of the Tide Disco server framework.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Check the health of each registered module in response to â€¦","Expose information about the connection. This should â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create and register an API module.","Check the health of the named module.","The status of each registered module.","The version of each module registered with this â€¦","Register an API module.","","","Serve the App asynchronously.","","","The status of the overall application.","Transform self into a <code>Listener</code>. Unless self is already â€¦","","","","","","","","","","","","","","","","","","","","Get the version of this application.","","","","","","Create a new App with a given state.","Set the application version.","","Errors which can be serialized in a response body.","The simplest possible implementation of Error.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","A response to a healthcheck endpoint.","Common health statuses of an application.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","The status of this health check.","","","","","","","","","","","A state which allows read access.","","The type of state which this type allows a caller to read.","A state which allows exclusive, write access.","","","","","","","The HTTP DELETE method.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","The HTTP GET method.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if a method is a standard HTTP method.","Check if a request method implies mutable access to the â€¦","The Tide Disco METRICS method.","The HTTP POST method.","The HTTP PUT method.","Do an operation with immutable access to the state.","The Tide Disco SOCKET method.","","","","","","","","","","","Do an operation with mutable access to the state.","","","","","","","","","","","","","","","","","","","","","","","Parameters passed to a route handler.","","","","","","The Accept header of this request.","","","","","","","","","Get the value of a named parameter and convert it to a â€¦","Deserialize the body of a request.","","","Get the value of a named parameter and convert it to a boolâ€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","The headers of the incoming request.","Get the value of a named parameter and convert it to an â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The Method used to dispatch the request.","","Parse a parameter from a Request.","Get the value of a named optional parameter and convert it â€¦","Get the value of a named optional parameter and convert it â€¦","Get the value of a named optional parameter and convert it â€¦","Get the value of a named optional parameter.","Get the value of a named optional parameter and convert it â€¦","Get the value of a named optional parameter and convert it â€¦","Get the value of a named parameter.","","","","Get the remote address for this request.","","","","Get the value of a named parameter and convert it to a â€¦","Get the value of a named parameter and convert it to â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All the information we need to parse, typecheck, and â€¦","An error returned by a route handler.","","","","","","","","","","","","","","","","","","","","","Compose an HTML fragment documenting all the variations on â€¦","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Whether a non-default handler has been bound to this route.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new route with a modified error type.","The HTTP method of the route.","The name of the route.","Parse a Route from a TOML specification.","Get all formal parameters.","Iterate over route patterns.","","","","","","","","","","","","","","","","","","","","","","","","","","A connection facilitating bi-directional, asynchronous â€¦","","","","An error returned by a socket handler.","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","202 Accepted","502 Bad Gateway","400 Bad Request","409 Conflict","100 Continue","201 Created","103 Early Hints","417 Expectation Failed","424 Failed Dependency","403 Forbidden","302 Found","504 Gateway Timeout","410 Gone","505 HTTP Version Not Supported","418 Iâ€™m a teapot","226 Im Used","507 Insufficient Storage","500 Internal Server Error","411 Length Required","423 Locked","508 Loop Detected","405 Method Not Allowed","421 Misdirected Request","301 Moved Permanently","207 Multi-Status","300 Multiple Choice","511 Network Authentication Required","204 No Content","203 Non Authoritative Information","406 Not Acceptable","510 Not Extended","404 Not Found","501 Not Implemented","304 Not Modified","200 Ok","","206 Partial Content","413 Payload Too Large","402 Payment Required","308 Permanent Redirect","412 Precondition Failed","428 Precondition Required","407 Proxy Authentication Required","431 Request Header Fields Too Large","408 Request Timeout","416 Requested Range Not Satisfiable","205 Reset Content","303 See Other","503 Service Unavailable","Serializable HTTP status code.","101 Switching Protocols","307 Temporary Redirect","425 Too Early","429 Too Many Requests","401 Unauthorized","451 Unavailable For Legal Reasons","422 Unprocessable Entity","415 Unsupported Media Type","426 Upgrade Required","414 URI Too Long","506 Variant Also Negotiates","","","","","","","","The canonical reason for a given status code","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the status code is the <code>4xx</code> range.","Returns <code>true</code> if the status code is <code>1xx</code> range.","Returns <code>true</code> if the status code is the <code>3xx</code> range.","Returns <code>true</code> if the status code is the <code>5xx</code> range.","Returns <code>true</code> if the status code is the <code>2xx</code> range.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,142,5,142,11,142,0,0,0,142,0,11,0,142,11,11,0,0,0,0,0,0,0,0,0,5,0,5,142,142,11,0,0,25,4,0,25,4,0,0,34,9,4,3,4,5,3,25,25,3,25,4,3,25,4,5,9,11,3,25,4,5,9,11,3,0,3,5,9,11,3,5,9,11,3,3,0,0,0,3,5,3,4,3,3,3,3,3,3,0,3,3,25,4,5,5,11,3,3,25,4,5,9,11,25,25,3,3,3,11,0,25,3,3,3,34,9,0,0,3,3,0,3,3,3,3,0,3,25,4,5,9,11,3,3,3,3,11,3,3,0,3,0,0,11,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,34,9,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,3,3,3,5,9,11,3,5,3,3,25,4,5,9,11,11,3,25,4,5,9,11,3,25,4,5,9,11,25,25,3,3,25,4,5,9,11,0,69,0,0,0,69,0,69,69,69,69,69,69,69,69,69,0,69,77,69,69,68,69,86,69,77,78,68,86,69,77,78,68,69,69,77,78,69,77,78,78,68,69,78,77,78,68,77,77,77,77,77,69,69,77,78,68,78,86,69,77,78,68,68,68,78,78,78,78,68,78,78,68,86,69,77,78,68,86,68,68,68,68,78,68,86,78,78,78,78,68,68,78,68,77,78,68,68,69,77,68,69,77,78,69,86,69,77,78,68,86,69,77,78,68,86,69,77,78,68,68,86,69,77,78,68,68,68,68,143,143,144,145,145,146,147,100,0,0,0,0,0,110,0,100,0,96,103,100,100,100,96,106,104,100,102,103,106,104,100,102,103,100,100,102,103,100,102,103,104,104,100,102,103,103,104,102,103,102,102,102,102,103,103,103,103,100,100,102,103,106,104,100,102,103,106,96,106,104,100,102,103,106,106,102,103,106,102,103,106,100,102,102,110,100,102,103,100,106,104,100,102,103,106,104,100,102,103,106,104,100,102,103,106,106,104,100,102,103,106,106,148,0,0,113,113,113,113,113,109,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,109,109,109,109,109,109,113,109,113,113,113,109,113,113,113,113,113,113,113,113,117,0,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,94,117,117,117,117,117,117,118,0,118,0,0,118,81,0,149,118,149,118,118,118,118,118,118,118,118,118,118,118,149,118,118,118,118,149,118,118,118,118,118,118,81,118,118,118,149,118,149,118,149,118,149,118,79,83,0,83,115,125,130,125,130,115,115,125,130,115,115,115,125,130,115,0,0,0,0,0,115,115,125,130,115,74,125,125,115,115,125,125,125,115,74,74,74,74,74,115,74,125,130,131,115,74,125,130,131,115,115,74,125,130,131,115,74,125,130,131,115,115,130,125,130,125,125,125,125,130,130,130,130,115,115,74,125,130,130,131,115,74,125,130,131,130,74,74,115,74,125,130,131,74,131,125,74,74,74,74,74,74,74,125,131,125,74,115,130,115,74,74,115,74,125,130,131,115,130,115,74,125,130,130,131,115,74,125,130,131,115,74,125,130,131,115,74,125,130,131,150,151,150,152,151,153,154,155,156,154,152,116,116,116,133,116,133,133,133,133,116,0,133,133,133,133,116,0,0,133,0,116,133,116,133,133,133,116,157,82,133,116,157,82,133,133,133,133,133,82,116,82,133,133,116,116,157,82,133,82,116,157,82,133,116,82,82,82,82,82,82,133,116,133,116,133,116,157,82,133,116,157,82,133,116,157,82,133,116,157,82,133,158,114,114,114,0,114,114,114,0,114,114,92,114,92,114,114,92,114,114,92,114,114,114,114,114,92,114,92,114,92,92,92,92,92,114,114,92,114,92,114,92,92,114,92,114,159,159,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,0,111,111,111,111,111,111,111,111,111,111,111,111,111,0,111,111,111,111,111,111,111,111,111,111,111,139,139,139,111,139,111,139,111,139,111,139,111,139,139,111,111,111,111,111,111,111,111,111,139,139,111,111,139,111,111,111,111,139,111,111,111,111,111,111,139,111,139,111,139,111,111,139,111,139,111,139,111,139],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],2],0,0,0,[3,1],[4,1],[5,1],[3,1],[6,6],[6,6],[3,1],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,7],[8,7],[3,3],[5,5],[[[9,[-1]]],[[9,[-1]]],10],[11,11],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[3,3],13],[[-1,-2],13,[],[]],[[1,1],2],[[1,1,[14,[[12,[1,1]]]]],[[17,[15,16]]]],[8,[[20,[[19,[18]]]]]],[-1,[[17,[3]]],21],[-1,[[17,[5]]],21],[-1,[[17,[3]]],21],0,[3,[[22,[1]]]],[[3,3],7],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],0,[[3,23],[[17,[12,24]]]],[[3,23],[[17,[12,24]]]],[[25,23],26],[[4,23],26],[[5,23],[[17,[12,24]]]],[[5,23],26],[[11,23],26],[3,[[22,[1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[27,[[17,[25,28]]]],[27,[[17,[25,28]]]],[-1,[[17,[3,12]]],[[30,[29]]]],[-1,[[17,[3,12]]],[[30,[29]]]],[1,[[17,[3,31]]]],[1,[[17,[11,-1]]],[]],[1,2],[[],[[22,[32]]]],[3,7],[3,7],[[3,-1],12,33],0,0,0,[[[35,[34]]],[[17,[36,37]]]],[3,[[22,[[38,[1]]]]]],[3,[[22,[1]]]],0,[[3,[40,[39]]],1],[[3,[41,[39]]],1],[[3,[42,[39]]],1],[[3,43],1],[7,12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,[[17,[[44,[12]],45]]]],[3,[[17,[[44,[12]],45]]]],[-1,[[47,[46]]],[]],[3,46],[11,7],[3,7],[[3,1],[[17,[3,31]]]],[29,8],[[3,3],[[22,[46]]]],0,0,[[1,11],11],[[],48],[1,2],[3,49],[1,[[17,[3,31]]]],[[1,-1],[[17,[3,31]]],50],[[3,3],[[22,[13]]]],[3,[[22,[1]]]],[3,1],[3,[[22,[[52,[51]]]]]],[3,[[17,[53,12]]]],[3,[[22,[54]]]],[3,[[22,[54]]]],[3,[[22,[1]]]],[3,55],[3,[[57,[56]]]],0,0,0,0,[3,1],[[3,-1],17,58],[[3,-1],17,58],[[3,[22,[1]]],12],[[3,[22,[1]]],[[17,[12,31]]]],[[3,59],[[17,[12,12]]]],[[3,[22,[1]]],[[17,[12,12]]]],[[3,1],12],[[3,[22,[54]]],[[17,[12,12]]]],[[3,[22,[1]]],12],[[3,1],[[17,[12,12]]]],[[3,1],[[17,[12,12]]]],0,[[3,-1],[[17,[[61,[60]],62]]],[[64,[],[[63,[[22,[54]]]]]]]],0,[3,[[17,[2,12]]]],[3,[[17,[62]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[-1,[[17,[-2]]],[],[]],[1,[[17,[3]]]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[1,[[17,[11,-1]]],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[[25,27],[[17,[12,28]]]],[[25,27],[[17,[12,28]]]],[3,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[3,66,66],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,67,[]],[-1,67,[]],[[[68,[-1,-2,-3]],1,-5],[[17,[[68,[-1,-2,-3]],69]]],[70,71],[],[70,71,72],73,[70,71,[64,[74,-1],[[63,[[75,[[17,[-4,-2]]]]]]]]]],[69,[[22,[76]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[69,[[22,[67]]]],[69,69],[77,77],[78,78],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[],78],[[[68,[-1,-2,-3]],1,-5],[[17,[[68,[-1,-2,-3]],69]]],[70,71,79],[],[70,71,72],73,[70,71,[64,[74],[[63,[[75,[[17,[-4,-2]]]]]]]]]],[69,1],0,[-1,[[17,[77]]],21],[-1,[[17,[78]]],21],[[[68,[-1,-2,-3]]],80,[],[],72],[[77,77],7],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[69,23],26],[[69,23],26],[[77,23],26],[[78,23],26],[[[68,[-1,-2,-3]],23],26,[],[],72],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[17,[[68,[-2,-3,-4]],69]]],[[30,[29]]],[],[],72],[[[68,[-1,-2,-3]],1,-5],[[17,[[68,[-1,-2,-3]],69]]],[70,71,81],[],[70,71,72],73,[70,71,[64,[74],[[63,[[75,[[17,[-4,-2]]]]]]]]]],0,0,0,0,[[[68,[-1,-2,-3]],74,-1],36,[],[],72],0,0,[[[68,[-1,-2,-3]],1],[[82,[-1,-2,-3]]],[],[],72],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[68,[-1,-2,-3]]],-4,[],[],72,[]],[[[68,[-1,-2,-3]]],-4,[],[],72,[]],[[[68,[-1,-2,-3]],-5],[[68,[-1,-4,-3]]],[70,71],[70,71],[70,71,72],[],[10,70,71,[64,[-2],[[63,[-4]]]]]],[[[68,[-1,-2,-3]],1,-5],[[17,[[68,[-1,-2,-3]],69]]],[70,71,81],[],[70,71,72],[10,83],[70,71,[64,[74],[[63,[[75,[[17,[[84,[-4]],-2]]]]]]]]]],0,[-1,[[17,[[68,[-2,-3,-4]],69]]],[[85,[8]]],[],[],72],[[[86,[-1,-2,-3]]],[[22,[-4]]],[],[],72,[]],0,0,0,0,[[[68,[-1,-2,-3]],1,-5],[[17,[[68,[-1,-2,-3]],69]]],[70,71,79],[],[70,71,72],73,[70,71,[64,[74],[[63,[[75,[[17,[-4,-2]]]]]]]]]],[[[68,[-1,-2,-3]],1,-5],[[17,[[68,[-1,-2,-3]],69]]],[70,71,79],[],[70,71,72],73,[70,71,[64,[74],[[63,[[75,[[17,[-4,-2]]]]]]]]]],0,[[[68,[-1,-2,-3]]],[[0,[[88,[],[[87,[[12,[1,[86,[-1,-2,-3]]]]]]]]]]],[],[],72],[[77,-1],17,58],[[78,-1],17,58],[[[68,[-1,-2,-3]]],1,[],[],72],[[[68,[-1,-2,-3]],1,-6],[[17,[[68,[-1,-2,-3]],69]]],[70,71],[70,89],72,[73,90],91,[70,71,[64,[74,[92,[-4,-5,-2,-3]],-1],[[63,[[75,[[17,[12,-2]]]]]]]]]],[69,[[22,[67]]]],0,[[[68,[-1,-2,-3]],1,-5],[[17,[[68,[-1,-2,-3]],69]]],[70,71],[70,89],[70,71,72],[73,70,71],[70,71,[64,[74,-1],[[63,[[93,[[17,[-4,-2]]]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[[[68,[-1,-2,-3]]],77,[],[],72],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[68,[-1,-2,-3]],-5],[[68,[-1,-2,-3]]],[70,71],[],[70,71,72],94,[70,71,[64,[-1],[[63,[[75,[-4]]]]]]]],[[[68,[-1,-2,-3]],2],[[68,[-1,-2,-3]]],[],[],72],[[[68,[-1,-2,-3]],95],[[68,[-1,-2,-3]]],[],[],72],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[96,[[99,[[98,[97]]]]]],0,[-1,67,[]],[-1,67,[]],[100,[[22,[76]]]],[[96,[101,[-1]]],[[99,[[98,[97]]]]],[70,71]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[100,[[22,[67]]]],[100,100],[102,102],[103,103],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[[104,[-1,-3,-2,-4]]],-5,[70,71],[70,71],[[105,[-2]]],[70,71,72],[]],[[[104,[-1,-3,-2,-4]]],-5,[70,71],[70,71],[[105,[-2]]],[70,71,72],[]],[100,1],[-1,[[17,[102]]],21],[-1,[[17,[103]]],21],0,[[[104,[-1,-3,-2,-4]]],12,[70,71],[70,71],[[105,[-2]]],[70,71,72]],[[102,102],7],[[103,103],7],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[100,23],26],[[100,23],26],[[102,23],26],[[103,23],26],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[106,[-1,-2,-3]],74,-1],102,[70,71],[],[70,71,72]],[96,[[61,[107]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[106,[-1,-3,-4]],1,-5],[[17,[[104,[-1,-3,-2,-4]],100]]],[70,71],[70,71],[[105,[-2]]],[70,71,72],[[85,[8]]]],[[[106,[-1,-2,-3]],74,-1,1],[[22,[36]]],[70,71],[],[70,71,72]],0,0,[[[106,[-1,-3,-4]],1,[68,[-1,-2,-4]]],[[17,[[106,[-1,-3,-4]],100]]],[70,71],[70,71],[[105,[-2]]],[70,71,72]],[[102,-1],17,58],[[103,-1],17,58],[[[106,[-1,-2,-3]],-4,-3],[[108,[12]]],[70,71],109,[70,71,72],[[110,[[20,[[106,[-1,-2,-3]]]]]]]],[100,[[22,[67]]]],[102,111],0,[[[110,[],[[112,[-1]]]]],[[17,[-1,62]]],[[96,[-2]]],[10,70,71]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[[[106,[-1,-2,-3]]],103,[70,71],[],[70,71,72]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[106,[-1,-2,-3]]],[70,71],[],[70,71,72]],[[[106,[-1,-2,-3]],95],[[106,[-1,-2,-3]]],[70,71],[],[70,71,72]],0,0,0,[-1,67,[]],[-1,67,[]],[113,[[22,[76]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[111,46],109],[[111,46],113],[113,[[22,[67]]]],[113,113],[[-1,-2],12,[],[]],[113,1],[-1,[[17,[113]]],21],[[113,113],7],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[113,23],26],[[113,23],26],[[[114,[-1]]],113,89],[-1,-1,[]],[115,113],[16,113],[62,113],[[[116,[-1]]],113,89],[16,109],[62,109],[115,109],[[[116,[-1]]],109,89],[37,109],[[[114,[-1]]],109,89],[-1,-2,[],[]],[109,37],0,[[113,-1],17,58],[113,[[22,[67]]]],[109,111],[113,111],0,[-1,-2,[],[]],[-1,46,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,65,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[117,117],[[-1,-2],12,[],[]],[[],117],[-1,[[17,[117]]],21],[[117,117],7],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[117,23],26],[-1,-1,[]],[-1,-2,[],[]],[[117,-1],17,58],[94,111],[117,111],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,65,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[118,118],[[-1,-2],12,[],[]],[[],118],[[118,118],7],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[118,23],26],[[118,23],26],[-1,-1,[]],[-1,-1,[]],[119,118],[1,[[17,[118,-1]]],[]],[[],118],[-1,-2,[],[]],[-1,-2,[],[]],[118,7],[118,7],[[],118],[[],118],[[],118],[[[81,[],[[120,[-1]]]],-3],[[99,[[98,[97]]]]],[],[],[70,[121,[-1],[[63,[[75,[-2]]]]]]]],[[],118],[-1,-2,[],[]],[-1,46,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,65,[]],[-1,65,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[79,-3],[[99,[[98,[97]]]]],[],[],[70,[121,[-1],[[63,[[75,[-2]]]]]]]],0,0,[[[83,[],[[122,[-1]]]]],[[17,[46,-1]]],[123,67]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[74,[[17,[124,115]]]],[125,[[17,[-1,115]]],[[127,[126]]]],[125,[[17,[7,115]]]],[-1,67,[]],[-1,67,[]],[125,[[17,[-1,115]]],[[127,[128]]]],[125,[[17,[1,115]]]],[125,[[17,[126,115]]]],[115,[[22,[76]]]],[[74,-1],[[17,[-2,115]]],[90,89],[[127,[126]]]],[[74,-1],[[17,[-2,115]]],72,91],[74,[[61,[129]]]],[74,[[17,[-1,115]]],91],[[74,-1],[[17,[7,115]]],[90,89]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[115,[[22,[67]]]],[115,115],[74,74],[125,125],[130,130],[131,131],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[115,1],[-1,[[17,[115]]],21],[-1,[[17,[130]]],21],[[125,125],7],[[130,130],7],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[115,23],26],[[115,23],26],[[74,23],26],[[125,23],26],[[130,23],26],[[130,23],[[17,[12,24]]]],[[131,23],26],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[1,[[17,[130,-1]]],[]],[74,132],[[74,-1],[[17,[-2,115]]],[90,89],[[127,[128]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[74,118],0,[[[35,[-1]],131],[[17,[[22,[125]],115]]],[]],[[74,-1],[[17,[[22,[-2]],115]]],[90,89],[[127,[126]]]],[[74,-1],[[17,[[22,[7]],115]]],[90,89]],[[74,-1],[[17,[[22,[-2]],115]]],[90,89],[[127,[128]]]],[[74,-1],[[22,[125]]],[90,89]],[[74,-1],[[17,[[22,[1]],115]]],[90,89]],[[74,-1],[[17,[[22,[126]],115]]],[90,89]],[[74,-1],[[17,[125,115]]],[90,89]],[125,130],0,[[1,131],[[17,[125,115]]]],[74,[[22,[1]]]],[[115,-1],17,58],[[130,-1],17,58],[115,[[22,[67]]]],[[74,-1],[[17,[1,115]]],[90,89]],[[74,-1],[[17,[126,115]]],[90,89]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[1,[[17,[130,-1]]],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,67,[]],[-1,67,[]],[133,[[22,[76]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[133,[[22,[67]]]],[133,133],[[-1,-2],12,[],[]],[133,1],[[[82,[-1,-2,-3]]],80,[],[],72],[[[116,[-1]],23],26,89],[[[82,[-1,-2,-3]],23],26,[],[],72],[[133,23],26],[[133,23],26],[-1,-1,[]],[115,[[116,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[82,[-1,-2,-3]]],7,[],[],72],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[116,[-1]],-3],[[116,[-2]]],[],[],[[64,[-1],[[63,[-2]]]]]],[[[82,[-1,-2,-3]],-5],[[82,[-1,-4,-3]]],[70,71],[70,71],[70,71,72],[],[70,71,[64,[-2],[[63,[-4]]]]]],[[[82,[-1,-2,-3]]],118,[],[],72],[[[82,[-1,-2,-3]]],46,[],[],72],[[46,8,[20,[78]]],[[17,[[82,[-1,-2,-3]],133]]],[],[],72],[[[82,[-1,-2,-3]]],[[14,[131]]],[],[],72],[[[82,[-1,-2,-3]]],[[0,[[88,[],[[87,[46]]]]]]],[],[],72],[133,[[22,[67]]]],[[[116,[-1]]],111,[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[114,[-1]]],134,[]],[[[92,[-1,-2,-3,-4]]],12,90,[],[],72],[[[114,[-1]],23],26,89],[[[114,[-1]],23],26,123],[-1,-1,[]],[45,[[114,[-1]]],[]],[135,[[114,[-1]]],[]],[-1,-1,[]],[115,[[114,[-1]]],[]],[136,[[114,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[114,[-1]],-3],[[114,[-2]]],[],[],[[64,[-1],[[63,[-2]]]]]],[[[99,[[92,[-1,-2,-3,-4]]]],137],[[138,[[17,[12,-5]]]]],[73,90],[],[],72,[]],[[[99,[[92,[-1,-2,-3,-4]]]],137],[[138,[[17,[12,-5]]]]],[73,90],[],[],72,[]],[[[99,[[92,[-1,-2,-3,-4]]]],137],[[138,[[22,[-5]]]]],90,91,[],72,[]],[[[99,[[92,[-1,-2,-3,-4]]]],137],[[138,[[17,[12,-5]]]]],[73,90],[],[],72,[]],[[[99,[[92,[-1,-2,-3,-4]]]],-1],[[17,[12,-5]]],[73,90],[],[],72,[]],[[[114,[-1]]],111,[]],[-1,46,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[[[99,[-1]],137],[[138,[[22,[17]]]]],[]],[-1,65,[]],[-1,65,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,67,[]],[-1,67,[]],[139,[[22,[76]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[111,1],[139,[[22,[67]]]],[111,111],[139,139],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[139,1],[-1,[[17,[111]]],21],[[111,111],7],[[111,140],7],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[111,23],26],[[111,23],26],[[139,23],26],[[139,23],26],[-1,-1,[]],[140,111],[-1,-1,[]],[141,[[22,[111]]]],[66,[[22,[111]]]],[[111,-1],12,33],[-1,-2,[],[]],[-1,-2,[],[]],[111,7],[111,7],[111,7],[111,7],[111,7],[[111,-1],17,58],[139,[[22,[67]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[-1,[[17,[-2]]],[],[]],[54,[[17,[111,-1]]],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,65,[]],[-1,65,[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[139],"p":[[1,"str"],[5,"PathBuf",981],[5,"Url",0],[6,"DiscoKey",0],[6,"HealthStatus",0],[5,"Command",982],[1,"bool"],[6,"Value",983],[5,"ServerState",0],[10,"Clone",984],[6,"UrlSegment",0],[1,"tuple"],[6,"Ordering",985],[1,"slice"],[5,"Config",986],[6,"ConfigError",987],[6,"Result",988],[1,"usize"],[5,"Router",989],[5,"Arc",990],[10,"Deserializer",991],[6,"Option",992],[5,"Formatter",993],[5,"Error",993],[5,"DiscoArgs",0],[8,"Result",993],[5,"ArgMatches",994],[8,"Error",995],[5,"Path",981],[10,"AsRef",996],[6,"ParseError",997],[5,"Id",998],[10,"Hasher",999],[8,"AppServerState",0],[5,"Request",1000],[5,"Response",1001],[5,"Error",1002],[6,"Host",1003],[6,"Position",1004],[5,"Range",1005],[5,"RangeFrom",1005],[5,"RangeTo",1005],[5,"RangeFull",1005],[5,"Request",1006],[6,"Error",1007],[5,"String",1008],[6,"Resettable",1009],[5,"ParseOptions",1010],[6,"Origin",1011],[10,"IntoIterator",1012],[1,"char"],[5,"Split",1013],[5,"PathSegmentsMut",1014],[1,"u16"],[5,"Parse",1015],[5,"UrlQuery",1010],[5,"Serializer",1015],[10,"Serializer",1016],[6,"IpAddr",1017],[6,"SocketAddr",1018],[5,"Vec",1019],[5,"Error",1020],[17,"Output"],[10,"Fn",1021],[5,"TypeId",1022],[1,"u64"],[10,"Error",1023],[5,"Api",220],[6,"ApiError",220],[10,"Send",1024],[10,"Sync",1024],[10,"StaticVersionType",1025],[10,"Serialize",1016],[5,"RequestParams",588],[8,"BoxFuture",1026],[5,"Backtrace",1027],[5,"ApiVersion",220],[5,"ApiMetadata",220],[10,"WriteState",538],[8,"Html",0],[10,"ReadState",538],[5,"Route",739],[10,"Metrics",585],[6,"Cow",1028],[10,"Into",996],[5,"RoutesWithPath",220],[17,"Item"],[10,"Iterator",1029],[10,"Display",993],[10,"Sized",1024],[10,"DeserializeOwned",991],[5,"Connection",821],[8,"BoxStream",1030],[10,"HealthCheck",508],[5,"Version",1031],[10,"Listener",355],[10,"Future",1032],[5,"Box",1033],[5,"Pin",1034],[6,"AppError",355],[5,"Server",1035],[5,"AppHealth",355],[5,"AppVersion",355],[5,"Module",355],[10,"From",996],[5,"App",355],[5,"ListenInfo",1036],[8,"Result",1020],[10,"Error",461],[10,"ToListener",355],[6,"StatusCode",867],[17,"Listener"],[5,"ServerError",461],[6,"SocketError",821],[6,"RequestError",588],[6,"RouteError",739],[6,"HealthStatus",508],[6,"Method",538],[6,"Method",1037],[17,"State"],[10,"FnOnce",1021],[17,"Error"],[10,"Debug",993],[5,"Accept",1038],[6,"RequestParamValue",588],[5,"TaggedBase64",1039],[10,"TryFrom",996],[1,"u128"],[1,"u8"],[6,"RequestParamType",588],[5,"RequestParam",588],[5,"Headers",1040],[6,"RouteParseError",739],[6,"CloseCode",1041],[5,"Error",1042],[5,"Error",1043],[5,"Context",1044],[6,"Poll",1045],[5,"OutOfRangeError",867],[6,"StatusCode",1046],[1,"i64"],[8,"AppState",0],[15,"IncorrectMethod",348],[15,"CannotReadToml",348],[15,"AmbiguousRoutes",348],[15,"Route",348],[15,"InvalidMetaTable",348],[15,"Api",460],[5,"ParseMethodError",538],[15,"IncorrectParamType",728],[15,"TagMismatch",728],[15,"IntegerOverflow",728],[15,"MissingParam",728],[15,"InvalidParam",728],[15,"TaggedBase64",728],[15,"Http",728],[5,"MapErr",739],[15,"IncorrectMethod",820],[15,"IncorrectMethod",865]],"b":[[93,"impl-Debug-for-Url"],[94,"impl-Display-for-Url"],[97,"impl-Display-for-HealthStatus"],[98,"impl-Debug-for-HealthStatus"],[125,"impl-Index%3CRange%3CPosition%3E%3E-for-Url"],[126,"impl-Index%3CRangeFrom%3CPosition%3E%3E-for-Url"],[127,"impl-Index%3CRangeTo%3CPosition%3E%3E-for-Url"],[128,"impl-Index%3CRangeFull%3E-for-Url"],[136,"impl-IntoClientRequest-for-%26Url"],[137,"impl-IntoClientRequest-for-Url"],[271,"impl-Display-for-ApiError"],[272,"impl-Debug-for-ApiError"],[298,"impl-IntoIterator-for-Api%3CState,+Error,+VER%3E"],[299,"impl-IntoIterator-for-%26Api%3CState,+Error,+VER%3E"],[405,"impl-Debug-for-AppError"],[406,"impl-Display-for-AppError"],[480,"impl-Debug-for-ServerError"],[481,"impl-Display-for-ServerError"],[482,"impl-From%3CSocketError%3CE%3E%3E-for-ServerError"],[484,"impl-From%3CRequestError%3E-for-ServerError"],[485,"impl-From%3CConfigError%3E-for-ServerError"],[486,"impl-From%3CError%3E-for-ServerError"],[487,"impl-From%3CRouteError%3CE%3E%3E-for-ServerError"],[558,"impl-Display-for-Method"],[559,"impl-Debug-for-Method"],[661,"impl-Debug-for-RequestError"],[662,"impl-Display-for-RequestError"],[665,"impl-Debug-for-RequestParamType"],[666,"impl-Display-for-RequestParamType"],[780,"impl-Display-for-RouteParseError"],[781,"impl-Debug-for-RouteParseError"],[837,"impl-Display-for-SocketError%3CE%3E"],[838,"impl-Debug-for-SocketError%3CE%3E"],[840,"impl-From%3CError%3E-for-SocketError%3CE%3E"],[841,"impl-From%3CError%3E-for-SocketError%3CE%3E"],[843,"impl-From%3CRequestError%3E-for-SocketError%3CE%3E"],[844,"impl-From%3CError%3E-for-SocketError%3CE%3E"],[943,"impl-PartialEq-for-StatusCode"],[944,"impl-PartialEq%3CStatusCode%3E-for-StatusCode"],[949,"impl-Debug-for-StatusCode"],[950,"impl-Display-for-StatusCode"],[951,"impl-Debug-for-OutOfRangeError"],[952,"impl-Display-for-OutOfRangeError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
