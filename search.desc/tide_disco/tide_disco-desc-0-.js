searchState.loadedDescShard("tide_disco", 0, "<em>Tide Disco is a web server framework with built-in </em>…\nRepresents a TOML array\nRepresents a TOML boolean\nRepresents a TOML datetime\nConfiguration keys for Tide Disco settings\nRepresents a TOML float\nRepresents a TOML integer\nNumber of times to poll before failing\nNumber of milliseconds to sleep between attempts\nRepresents a TOML string\nRepresents a TOML table\nA parsed URL record.\nIf true, log in color. Otherwise, no color.\nHTTP routes\nReturn the serialization of this URL.\nReturn the authority of this URL as an ASCII string.\nServer address\nReturn whether this URL is a cannot-be-a-base URL, meaning …\nCheck api.toml for schema compliance errors\nCompose the path to the application’s configuration file\nGet the application configuration\nAdd routes from api.toml to the routefinder instance in …\nSerialize with Serde using the internal representation of …\nIf this URL has a host and it is a domain name (not an IP …\nReturn this URL’s fragment identifier, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a directory name as <code>std::path::Path</code> into an URL in …\nConvert a file name as <code>std::path::Path</code> into an URL in the …\nGet the path to <code>api.toml</code>\nReturn whether the URL has an ‘authority’, which can …\nEquivalent to <code>url.host().is_some()</code>.\nReturn a JSON expression with status 200 indicating the …\nReturn the parsed representation of the host for this URL. …\nReturn the string representation of the host (domain or IP …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the serialization of this URL.\nReturn whether the URL is special (has a special scheme)\nParse a string as an URL, with this URL as the base URL.\nLoad the web API or panic\nCreates a relative URL if possible, with this URL as the …\nInterfaces for methods of accessing to state.\nSupport for routes using the Prometheus metrics format.\nReturn a default <code>ParseOptions</code> that can fully configure the …\nReturn the origin of this URL (…\nParse an absolute URL from a string.\nParse an absolute URL from a string and add params to its …\nReturn the password for this URL, if any, as a …\nReturn the path for this URL, as a percent-encoded ASCII …\nUnless this URL is cannot-be-a-base, return an iterator of …\nReturn an object with methods to manipulate this URL’s …\nReturn the port number for this URL, if any.\nReturn the port number for this URL, or the default port …\nReturn this URL’s query string, if any, as a …\nParse the URL’s query string, if any, as …\nManipulate this URL’s query string, viewed as a sequence …\nReturn the scheme of this URL, lower-cased, as an ASCII …\nSerialize with Serde using the internal representation of …\nChange this URL’s fragment identifier.\nChange this URL’s host.\nChange this URL’s host to the given IP address.\nChange this URL’s password.\nChange this URL’s path.\nChange this URL’s port number.\nChange this URL’s query string. If <code>query</code> is <code>None</code>, this …\nChange this URL’s scheme.\nChange this URL’s username.\nAn interface for asynchronous communication with clients, …\nResolve a URL’s host and port number to <code>SocketAddr</code>.\nAssuming the URL is in the <code>file</code> scheme or similar, convert …\nReturn the username for this URL (typically the empty …\nWait for the server to respond to a connection request\nA description of an API.\nAn error encountered when parsing or constructing an Api.\nMetadata used for describing and documenting an API.\nVersion information about an API.\nThe version of this API.\nRegister a handler for a route.\nRegister a handler for a DELETE route.\nA description of this API.\nThe version of the Tide Disco API specification format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an Api by reading a TOML specification from a file.\nRegister a handler for a GET route.\nThe heading preceding documentation of a route description.\nThe heading for documentation of a route.\nThe heading preceding documentation of route parameters.\nThe heading preceding documentation of all routes in this …\nHTML to be appended to automatically generated …\nHTML to be prepended to automatically generated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister a handler for a METRICS route.\nThe name of this API.\nParse an API from a TOML specification.\nDocumentation to insert in the parameters section of a …\nHTML formatting an entry in a table documenting the …\nHTML closing a table documenting the parameters of a route.\nHTML preceding the contents of a table documenting the …\nRegister a handler for a POST route.\nRegister a handler for a PUT route.\nHTML formatting the path of a route.\nRegister a handler for a SOCKET route.\nThe format version of the TOML specification used to load …\nRegister a uni-directional handler for a SOCKET route.\nSet the health check handler for this API.\nServe the contents of <code>dir</code> at the URL <code>/public/{{NAME}}</code>.\nSet the API version.\nA tide-disco server application.\nAn error encountered while building an App.\nThe health status of an application.\nVersion information about an application.\nThe Listener trait represents an implementation of http …\nWhat listener are we converting into?\nRAII guard to ensure a module is registered after it is …\nToListener represents any type that can be converted into a\nStart accepting incoming connections. This method must be …\nThe version of this application.\nBind the listener. This starts the listening process by …\nThe version of the Tide Disco server framework.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck the health of each registered module in response to …\nExpose information about the connection. This should …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate and register an API module.\nCheck the health of the named module.\nThe status of each registered module, indexed by version.\nThe supported versions of each module registered with this …\nRegister this module with the linked app.\nRegister an API module.\nServe the App asynchronously.\nThe status of the overall application.\nTransform self into a <code>Listener</code>. Unless self is already …\nGet the version of this application.\nCreate a new App with a given state.\nSet the application version.\nErrors which can be serialized in a response body.\nThe simplest possible implementation of Error.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA response to a healthcheck endpoint.\nCommon health statuses of an application.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe status of this health check.\nTCP listener which accepts only a limited number of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nListen at the given address.\nListen at the given port on all interfaces.\nA state which allows read access.\nThe type of state which this type allows a caller to read.\nA state which allows exclusive, write access.\nThe HTTP DELETE method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe HTTP GET method.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a method is a standard HTTP method.\nCheck if a request method implies mutable access to the …\nThe Tide Disco METRICS method.\nThe HTTP POST method.\nThe HTTP PUT method.\nDo an operation with immutable access to the state.\nThe Tide Disco SOCKET method.\nDo an operation with mutable access to the state.\nParameters passed to a route handler.\nThe Accept header of this request.\nGet the value of a named parameter and convert it to a …\nDeserialize the body of a request.\nGet the value of a named parameter and convert it to a bool…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe headers of the incoming request.\nGet the value of a named parameter and convert it to an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Method used to dispatch the request.\nParse a parameter from a Request.\nGet the value of a named optional parameter and convert it …\nGet the value of a named optional parameter and convert it …\nGet the value of a named optional parameter and convert it …\nGet the value of a named optional parameter.\nGet the value of a named optional parameter and convert it …\nGet the value of a named optional parameter and convert it …\nGet the value of a named parameter.\nGet the remote address for this request.\nGet the value of a named parameter and convert it to a …\nGet the value of a named parameter and convert it to …\nA connection facilitating bi-directional, asynchronous …\nAn error returned by a socket handler.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerializable HTTP status code.\nThe canonical reason for a given status code\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the status code is the <code>4xx</code> range.\nReturns <code>true</code> if the status code is <code>1xx</code> range.\nReturns <code>true</code> if the status code is the <code>3xx</code> range.\nReturns <code>true</code> if the status code is the <code>5xx</code> range.\nReturns <code>true</code> if the status code is the <code>2xx</code> range.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")